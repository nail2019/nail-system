{"ast":null,"code":"var _class, _temp2;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component, Fragment } from 'react';\nimport { render, unmountComponentAtNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nvar Frame = (_temp2 = _class = function (_Component) {\n  _inherits(Frame, _Component);\n\n  function Frame() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Frame);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.renderContent = function () {\n      var doc = _this.frame.contentDocument;\n      var head = _this.props.head;\n\n      if (head != null) {\n        render(head, doc.head);\n      }\n\n      render(React.createElement(Fragment, null, _this.props.children), _this.frameRoot);\n    }, _this.frameRef = function (f) {\n      if (f != null) {\n        _this.frame = f;\n      }\n\n      if (typeof _this.props.frameRef === 'function') {\n        _this.props.frameRef(_this.frameRoot);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Frame.prototype.componentDidMount = function componentDidMount() {\n    var doc = this.frame.contentDocument;\n    this.frameRoot = doc.createElement('div');\n    doc.body.appendChild(this.frameRoot);\n    this.renderContent();\n\n    if (typeof this.props.documentRef === 'function') {\n      this.props.documentRef(doc);\n    }\n  };\n\n  Frame.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.renderContent();\n  };\n\n  Frame.prototype.componentWillUnmount = function componentWillUnmount() {\n    var doc = this.frame.contentDocument;\n    unmountComponentAtNode(doc.head);\n    unmountComponentAtNode(this.frame);\n  };\n\n  Frame.prototype.render = function render() {\n    var _props = this.props,\n        title = _props.title,\n        style = _props.style;\n    return React.createElement('iframe', {\n      ref: this.frameRef,\n      title: title,\n      style: style\n    });\n  };\n\n  return Frame;\n}(Component), _class.defaultProps = {\n  title: undefined,\n  head: undefined,\n  frameRef: undefined,\n  documentRef: undefined\n}, _temp2);\nexport { Frame as default };\nFrame.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  title: PropTypes.string,\n  head: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n  frameRef: PropTypes.func,\n  documentRef: PropTypes.func\n} : {};","map":null,"metadata":{},"sourceType":"module"}